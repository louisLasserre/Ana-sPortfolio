---
import ArrowLeft from "src/icons/ArrowLeft.astro";

const { back, mode = "light" } = Astro.props;
---

<div class={`header ${mode}`}>
  {
    back ? (
      <a href={back}>
        <ArrowLeft mode={mode} />
      </a>
    ) : (
      <div />
    )
  }

  <a class="romie name" href="/">Anais Akkouche</a>

  <button class="hamb">
    <div class="trait"></div>
    <div class="trait"></div>
    <div class="trait"></div>
  </button>
</div>

<section class={`hambOpen romie ${mode}`}>
  <div class="links">
    <a href="/about" class="light headerLink anim" data-delay="0.3">About</a>
    <a href="/works" class="light headerLink anim" data-delay="0.4">Projects</a>
    <a href="/#contact" class="light headerLink anim" data-delay="0.5"
      >Contact me</a
    >
  </div>
</section>

<script>
  import { scrollInstance } from "@utils/scroll/useScroll";
  const { gsap, ease1, ease2 } = scrollInstance();
  //var test = CustomEase.create("superEase", "M0,0 C0.496,0.004 0,1 1,1");

  function openHamb() {
    var open = gsap.timeline();
    open.add("texts");

    open.set(".hambOpen", { display: "grid" });

    open.to(".hambOpen", {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      delay: 0.1,
      duration: 1,
      ease: ease2,
    });

    const elements: string[] = gsap.utils.toArray(".headerLink");
    elements.forEach((elmt: string) => {
      open.from(
        elmt,
        {
          y: "100%",
          opacity: "0",
          duration: 0.8,
          delay: (i, target) => target.dataset.delay,
          ease: ease1,
        },
        "texts"
      );
    });
  }
  function closeHamb() {
    var close = gsap.timeline();

    close.to(".hambOpen", {
      clipPath: "polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)",
      delay: 0.1,
      duration: 0.8,
      ease: ease2,
    });

    close.set(".hambOpen", { display: "none" });

    const texts = document.querySelectorAll("[data-anim]");
    texts.forEach((text) => {
      const value = text.attributes["data-anim"].value;

      text.classList.remove(value);
    });
  }

  let hambStatus = false;

  const burger = document.querySelector(".hamb");
  const header = document.querySelector(".header") as HTMLElement;

  if (burger) {
    burger.addEventListener("click", (e) => {
      hambStatus = !hambStatus;
      header.classList.toggle("hambOn");

      if (hambStatus == true) {
        return openHamb();
      }
      if (hambStatus == false) {
        return closeHamb();
      }
    });
  }
</script>

<style lang="scss" is:global>
  @import "../stylesheet/main.scss";

  .hambOpen {
    &.light {
      background-color: $color_dark;
      .links {
        color: $color_background;
      }
    }
    &.dark {
      background-color: $color_background;
      .links {
        color: $color_dark;
      }
    }
    position: fixed;
    height: 100vh;
    width: 100vw;
    z-index: 18;
    display: none;
    place-items: center;
    clip-path: polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%);
    .links {
      font-size: 3rem;
      text-transform: uppercase;
      display: flex;
      align-items: center;
      flex-direction: column;
      gap: 2rem;
    }
  }

  .header {
    display: flex;
    position: fixed;
    top: 0;
    left: 3rem;
    right: 3rem;
    justify-content: space-between;
    align-items: center;
    padding-top: 1rem;
    z-index: 20;

    &.light {
      color: $color_dark;
      .hamb {
        .trait {
          background-color: $color_dark;
        }
      }
    }
    &.dark {
      color: $color_background;
      .hamb {
        .trait {
          background-color: $color_background;
        }
      }
    }

    & > a,
    .trait,
    .arrow {
      transition: color 0.3s, background-color 0.3s;
      transition-delay: 0.2s;
    }
    &.hambOn {
      &.light {
        .hamb {
          .trait {
            background-color: $color_background;
          }
        }
        & > a {
          color: $color_background;
        }
      }
      &.dark {
        .hamb {
          .trait {
            background-color: $color_dark;
          }
        }
        & > a {
          color: $color_dark;
        }
      }
    }

    & > div:first-child {
      width: 2rem;
    }
    & > a {
      //padding: 0.6rem;
      mix-blend-mode: difference;
    }

    .hamb {
      width: 2rem;
      height: 1rem;
      position: relative;
      z-index: 20;

      .trait {
        height: 1px;
        width: 100%;
        position: absolute;

        &:first-child {
          top: 0;
        }
        &:nth-child(2) {
          top: 50%;
          transform: translateY(-50%);
        }
        &:last-child {
          bottom: 0;
        }
      }
    }
  }
</style>
